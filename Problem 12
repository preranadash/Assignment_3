import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return np.exp(-x**2)

def g(x):
    return np.exp(-4*x**2)

# Define the range of x values
x_min = -2
x_max = 2
num_points = 1024  # Number of points for better resolution
x_values = np.linspace(x_min, x_max, num_points)
dx = x_values[1] - x_values[0]

def ft(x):
    return np.sqrt(np. pi / 5) * np.exp(-4/5 * x**2)

# Compute the function values
f_values = f(x_values)
g_values = g(x_values)

# Compute the DFT using FFT
dft_value_1 = np.fft.fft(f_values)
dft_value_2 = np.fft.fft(g_values)
dft_final = (dft_value_1 * dft_value_2)


# Compute the convolution using inverse FFT
convolution = np.fft.ifftshift(np.fft.ifft(dft_value_1 * dft_value_2)) * dx  # Multiply by dx for normalization

# Plotting
plt.figure(figsize=(10, 5))
plt.plot(x_values, f(x_values), label='exp(-x**2)')
plt.plot(x_values, g(x_values), label='exp(-4*x**2)')
plt.plot(x_values, np.real(convolution), label='Convolution')
plt.plot(x_values, np.real(ft(x_values)), label='Convolution_Analytical')

plt.title('Convolution of f(x) and g(x)')
plt.xlabel('x')
plt.ylabel('Convolution')
plt.legend()

plt.tight_layout()
plt.show()
