import matplotlib.pyplot as plt
import numpy as np
import time

# function to compute DFT
def direct_dft(f):
    n = len(f)
    dft = np.zeros(n, dtype=np.complex128)

    for q in range(n):
        for p in range(n):
            dft[q] += (f[p] * np.exp(-2j * np.pi * p * q / n))/(np.sqrt(n))

    return dft

# Generating random input data
n = 16
input_data = np.random.rand(n)

# Timing direct computation DFT
start_time = time.time()
direct_result = direct_dft(input_data)
direct_time = time.time() - start_time


# Timing numpy fft
start_time = time.time()
fft_result = np.fft.fft(input_data, norm = "ortho")
fft_time = time.time() - start_time

n_values = range(4, 101)
direct_times = []
fft_times = []

for n in n_values:
    # Generating random input data
    input_data = np.random.rand(n) + 1j * np.random.rand(n)
    
    # Timing direct computation DFT
    start_time = time.time()
    direct_result = direct_dft(input_data)
    direct_time = time.time() - start_time
    direct_times.append(direct_time)
    
    # Timing numpy fft
    start_time = time.time()
    fft_result = np.fft.fft(input_data)
    fft_time = time.time() - start_time
    fft_times.append(fft_time)

# Plotting the results
plt.plot(n_values, direct_times, label='DFT using direct computation', color = 'b')
plt.plot(n_values, fft_times, label='DFT using numpy.fft.fft', color = 'r')
plt.xlabel('n')
plt.ylabel('Time (seconds)')
plt.title('Time Taken by DFT Methods vs n')
plt.legend()
plt.grid(True, alpha = 0.5)
plt.show()
