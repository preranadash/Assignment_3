import numpy as np
import matplotlib.pyplot as plt

# Read data from the text file (Ass_3.txt)
with open('Ass_3.txt', 'r') as file:
    data = file.readlines()

# Extract x and y values from the data
x_values_c = []
y_values_c = []
for line in data:
    if line.strip():  # Check if the line is not empty
        x, y = map(float, line.split(':'))  # Assuming columns are separated by ":"
        x_values_c.append(x)
        y_values_c.append(y)
        
y_values_c = np.array(y_values_c) / (2*np.pi)
# Define the range of f values (frequency domain)
f_min = -10
f_max = 10
num_f_points = 1000
f_values = np.linspace(f_min, f_max, num_f_points)

# Analytical solution
def F(w):
    return np.where(np.abs(w) <= 1, np.pi/2, 0)

# Analytical Fourier transform
analytical_FT = F(f_values) * np.sqrt(2*np.pi)

# Compute the numerical Fourier transform using numerical integration
def sinc(x):
    return np.where(x != 0, np.sin(x) / x, 1)

def fourier_transform_sinc(x_values, k_values):
    result = np.zeros_like(k_values, dtype=np.complex128)
    for i, k in enumerate(k_values):
        integral = np.sum(sinc(x_values) * np.exp(-1j * k * x_values))
        result[i] = (np.sqrt(np.pi*2))*integral * (x_values[1] - x_values[0])/np.sqrt(2*np.pi) # assuming uniform spacing dx
    return result

x_FT_numerical_values = fourier_transform_sinc(f_values, f_values)

# Plot all three Fourier transform results
plt.plot(f_values, analytical_FT, color='b', label='Analytical')
plt.plot(f_values, np.real(x_FT_numerical_values), label='Numerical (Python)')
plt.plot(x_values_c, y_values_c, label='Numerical Using C')

plt.xlabel('Frequency (f)')
plt.ylabel('Fourier Transform')
plt.title('Comparison of Fourier Transform of sinc function')
plt.legend()
plt.xlim(-10, 10)  # Adjust x-axis limits
plt.grid(True)
plt.show()
