import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Define the Gaussian function
def gaussian(x, y):
    return np.exp(-x**2 - y**2)

# Define the analytical Fourier transform
def analytical_FT(kx, ky):
    return 0.5 * np.exp(0.25 * (-kx**2 - ky**2))

# Define the range and step size for x and y
x_min, x_max, num_x = -5, 5, 100
y_min, y_max, num_y = -5, 5, 100

# Create the grid of x and y values
x_values = np.linspace(x_min, x_max, num_x)
y_values = np.linspace(y_min, y_max, num_y)
x_grid, y_grid = np.meshgrid(x_values, y_values)

# Compute the Gaussian function on the grid
f_xy = gaussian(x_grid, y_grid)

# Compute the 2D Fourier transform
f_kxky = np.fft.fft2(f_xy)

# Shift the zero frequency component to the center
f_kxky_shifted = np.fft.fftshift(f_kxky) 

# Create figure and 3D axis
fig = plt.figure(figsize=(15, 5))

# Plot the Gaussian function in 3D
ax = fig.add_subplot(131, projection='3d')
ax.plot_surface(x_grid, y_grid, f_xy, cmap='hot')
ax.set_title('Gaussian function $f(x, y)$')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('f(x, y)')

# Plot the numerically obtained Fourier transform in 3D
ax = fig.add_subplot(132, projection='3d')
ax.plot_surface(x_grid, y_grid, np.abs(f_kxky_shifted), cmap='hot')
ax.set_title('Numerical Fourier transform $|F(k_x, k_y)|$')
ax.set_xlabel('kx')
ax.set_ylabel('ky')
ax.set_zlabel('|F(k_x, k_y)|')

# Create the grid of kx and ky values
kx_values = np.fft.fftfreq(num_x, x_values[1] - x_values[0])
ky_values = np.fft.fftfreq(num_y, y_values[1] - y_values[0])
kx_grid, ky_grid = np.meshgrid(kx_values, ky_values)

# Compute the analytical Fourier transform on the grid
analytical_FT_values = analytical_FT(kx_grid, ky_grid) * np.sqrt(2/np.pi)

# Plot the analytically obtained Fourier transform in 3D
ax = fig.add_subplot(133, projection='3d')
ax.plot_surface(kx_grid, ky_grid, analytical_FT_values, cmap='hot')
ax.set_title('Analytical Fourier transform')
ax.set_xlabel('kx')
ax.set_ylabel('ky')
ax.set_zlabel('Analytical FT')

# Adjust layout
plt.tight_layout()

# Show plot
plt.show()
